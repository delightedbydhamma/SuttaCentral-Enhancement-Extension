import { querySelectorDeep } from "query-selector-shadow-dom";
import ally from "ally.js";
import menu from "./VpMenu/index.html?raw";
import "./VpMenu/optimized_bootstrap.css";
import "./VpMenu/sc-custommenu.css";

function closeMenuOnOutsideClick(navMenu: HTMLElement, vpHamburger: HTMLElement) {
  document.addEventListener("click", event => {
    const target = event.target as HTMLElement;
    if (navMenu.style.display === "block" && !navMenu.contains(target) && !vpHamburger.contains(target)) {
      navMenu.style.display = "none";
    }
  });

  vpHamburger.addEventListener("click", event => {
    event.stopPropagation();
  });
}

function closeMenuOnClick(links: NodeListOf<Element>, navMenu: HTMLElement) {
  links.forEach(link => {
    link.addEventListener("click", event => {
      const currentUrl = window.location.href;
      setTimeout(() => {
        const newUrl = window.location.href;
        if (newUrl !== currentUrl) {
          navMenu.style.display = "none";
        }
      }, 100);
    });
  });
}

function closeMenuOnScroll(navMenu: HTMLElement) {
  let isMouseOverMenu = false;

  navMenu.addEventListener("mouseenter", () => {
    isMouseOverMenu = true;
  });

  navMenu.addEventListener("mouseleave", () => {
    isMouseOverMenu = false;
  });

  window.addEventListener("scroll", () => {
    if (!isMouseOverMenu && navMenu.style.display === "block") {
      navMenu.style.display = "none";
    }
  });
}

function toggleMenu(vpHamburger: HTMLElement, navMenu: HTMLElement) {
  if (navMenu) {
    const rect = vpHamburger.getBoundingClientRect();
    navMenu.style.top = `${rect.bottom}px`;
    navMenu.style.left = `0px`;
    navMenu.style.display = navMenu.style.display === "block" ? "none" : "block";
  }
}

function injectStyles() {
  const style = document.createElement("style");
  style.textContent = `
    #vpHamburger {
      padding-left: 5px;
      cursor: pointer;
    }
    #vpNavigationMenu {
      width: 575px;
      display: none;
      position: absolute;
      background-color: white;
      box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      border: 1px solid #ccc;
      margin: 0;
      list-style: none;
      color: black;
    }
  `;
  document.head.appendChild(style);
}

function addVpMenu(breadcrumb: HTMLElement) {
  const existingHamburger = document.getElementById("vpHamburger");
  if (existingHamburger) {
    return; // Exit if the hamburger icon already exists
  }

  const vpHamburger = document.createElement("div");
  vpHamburger.id = "vpHamburger";
  vpHamburger.innerHTML = `
    <svg width="15" height="15" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg">
      <rect width="30" height="4" rx="2" fill="white" />
      <rect y="13" width="30" height="4" rx="2" fill="white" />
      <rect y="26" width="30" height="4" rx="2" fill="white" />
    </svg>
  `;

  breadcrumb.appendChild(vpHamburger);

  const vpMenu = document.createElement("div");
  vpMenu.id = "vpNavigationMenu";
  vpMenu.innerHTML = menu;

  document.body.appendChild(vpMenu);

  injectStyles();

  vpHamburger.addEventListener("click", () => toggleMenu(vpHamburger, vpMenu));

  closeMenuOnClick(vpMenu.querySelectorAll("a"), vpMenu);
  closeMenuOnScroll(vpMenu);
  closeMenuOnOutsideClick(vpMenu, vpHamburger);
}

function removeVpMenu() {
  const vpHamburger = document.getElementById("vpHamburger");
  const vpMenu = document.getElementById("vpNavigationMenu");

  if (vpHamburger) vpHamburger.remove();
  if (vpMenu) vpMenu.remove();
}

function updateVpMenu(newSetting: string) {
  if (newSetting === "true") {
    const breadcrumb = querySelectorDeep(".top-bar-home-link") as HTMLElement;
    if (breadcrumb) {
      addVpMenu(breadcrumb);
    } else {
      observeBreadCrumb(addVpMenu);
    }
  } else {
    removeVpMenu();
  }
}

function observeBreadCrumb(callback: (breadcrumb: HTMLElement) => void) {
  const observer = ally.observe.shadowMutations({
    config: {
      childList: true,
      subtree: true,
    },
    callback: () => {
      const breadcrumb = querySelectorDeep(".top-bar-home-link") as HTMLElement;
      if (breadcrumb) {
        observer.disengage();
        callback(breadcrumb);
      }
    },
  });
}

export default defineContentScript({
  matches: ["*://suttacentral.net/*"],
  main() {
    function handleSettingChange(value: string) {
      updateVpMenu(value);
    }

    // Initial setup
    chrome.storage.sync.get("vpMenu", result => {
      handleSettingChange(result.vpMenu);
    });

    // Listen for changes in storage
    chrome.storage.onChanged.addListener((changes, namespace) => {
      if (namespace === "sync" && "vpMenu" in changes) {
        handleSettingChange(changes.vpMenu.newValue);
      }
    });
  },
});
